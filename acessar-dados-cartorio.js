#!/usr/bin/env node

/**
 * üè¢ SCRIPT DE ACESSO R√ÅPIDO - DADOS DO CART√ìRIO PAULISTA
 * 
 * Este script facilita o acesso aos dados coletados do Cart√≥rio Paulista
 * especialmente os identificadores API necess√°rios para chamadas futuras.
 */

const fs = require('fs');
const path = require('path');

// Carrega os dados do cart√≥rio
function carregarDadosCartorio() {
  try {
    const dadosPath = path.join(__dirname, 'cartorio-paulista-dados.json');
    const dados = JSON.parse(fs.readFileSync(dadosPath, 'utf8'));
    return dados.cartorio_paulista;
  } catch (error) {
    console.error('‚ùå Erro ao carregar dados:', error.message);
    return null;
  }
}

// Exibe informa√ß√µes principais
function exibirInformacoesPrincipais(cartorio) {
  console.log('\nüè¢ CART√ìRIO PAULISTA - INFORMA√á√ïES PRINCIPAIS\n');
  
  console.log(`üìã Nome: ${cartorio.informacoes_basicas.nome_completo}`);
  console.log(`‚≠ê Rating: ${cartorio.avaliacoes.rating_geral}/5 (${cartorio.avaliacoes.total_avaliacoes.toLocaleString()} avalia√ß√µes)`);
  console.log(`üìç Endere√ßo: ${cartorio.contato.endereco_completo}`);
  console.log(`üìû Telefone: ${cartorio.contato.telefone}`);
  console.log(`üîó Website: ${cartorio.contato.website}`);
}

// Exibe identificadores API
function exibirIdentificadoresAPI(cartorio) {
  console.log('\nüîë IDENTIFICADORES API (CR√çTICOS PARA DESENVOLVIMENTO)\n');
  
  const ids = cartorio.identificadores_api;
  console.log(`üÜî Place ID: ${ids.place_id}`);
  console.log(`üÜî CID: ${ids.cid}`);
  console.log(`üÜî Feature ID: ${ids.feature_id}`);
  console.log(`üìç Coordenadas: ${ids.latitude}, ${ids.longitude}`);
  
  console.log('\nüìã COPY-PASTE PARA DESENVOLVIMENTO:');
  console.log('```javascript');
  console.log(`const PLACE_ID = "${ids.place_id}";`);
  console.log(`const CID = "${ids.cid}";`);
  console.log(`const COORDS = {lat: ${ids.latitude}, lng: ${ids.longitude}};`);
  console.log('```');
}

// Exibe m√©tricas de avalia√ß√µes
function exibirMetricasAvaliacoes(cartorio) {
  console.log('\nüìä M√âTRICAS DE AVALIA√á√ïES\n');
  
  const dist = cartorio.avaliacoes.distribuicao;
  Object.entries(dist).forEach(([estrelas, dados]) => {
    const stars = estrelas.replace('_estrelas', '').replace('_estrela', '');
    const bar = '‚ñà'.repeat(Math.floor(dados.percentual / 5));
    console.log(`${stars}‚≠ê: ${dados.quantidade.toLocaleString()} (${dados.percentual}%) ${bar}`);
  });
  
  console.log(`\n‚úÖ Status: ${cartorio.metricas_reputacao.status_reputacao}`);
}

// Exibe configura√ß√µes de API
function exibirConfiguracoesAPI(cartorio) {
  console.log('\nüîß CONFIGURA√á√ïES DE API\n');
  
  const apis = cartorio.apis_suportadas;
  
  console.log('DataForSEO Endpoints:');
  Object.entries(apis.dataforseo).forEach(([key, value]) => {
    if (key.startsWith('endpoint_')) {
      const name = key.replace('endpoint_', '').toUpperCase();
      console.log(`  ${name}: ${value}`);
    }
  });
  
  console.log('\nGoogle Business Profile:');
  console.log(`  Place ID: ${apis.google_business_profile.place_id}`);
  console.log(`  Status: ${apis.google_business_profile.status}`);
  console.log(`  Claimed: ${apis.google_business_profile.claimed ? '‚úÖ' : '‚ùå'}`);
}

// Menu principal
function menu() {
  console.log('\nüéØ MENU DE OP√á√ïES:\n');
  console.log('1. üìã Informa√ß√µes Principais');
  console.log('2. üîë Identificadores API');
  console.log('3. üìä M√©tricas de Avalia√ß√µes'); 
  console.log('4. üîß Configura√ß√µes de API');
  console.log('5. üìÑ Exibir Todos os Dados');
  console.log('0. üö™ Sair');
}

// Fun√ß√£o principal
function main() {
  console.log('üè¢ DASHBOARD CART√ìRIO PAULISTA - ACESSO R√ÅPIDO AOS DADOS');
  console.log('=' .repeat(60));
  
  const cartorio = carregarDadosCartorio();
  
  if (!cartorio) {
    console.log('‚ùå N√£o foi poss√≠vel carregar os dados do cart√≥rio.');
    process.exit(1);
  }
  
  // Se foi chamado com argumentos, executa a√ß√£o espec√≠fica
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    switch (args[0]) {
      case 'place-id':
        console.log(cartorio.identificadores_api.place_id);
        break;
      case 'cid':
        console.log(cartorio.identificadores_api.cid);
        break;
      case 'rating':
        console.log(cartorio.avaliacoes.rating_geral);
        break;
      case 'total-reviews':
        console.log(cartorio.avaliacoes.total_avaliacoes);
        break;
      case 'endereco':
        console.log(cartorio.contato.endereco_completo);
        break;
      case 'telefone':
        console.log(cartorio.contato.telefone);
        break;
      case 'website':
        console.log(cartorio.contato.website);
        break;
      case 'info':
        exibirInformacoesPrincipais(cartorio);
        break;
      case 'api':
        exibirIdentificadoresAPI(cartorio);
        break;
      case 'metricas':
        exibirMetricasAvaliacoes(cartorio);
        break;
      case 'config':
        exibirConfiguracoesAPI(cartorio);
        break;
      case 'all':
        exibirInformacoesPrincipais(cartorio);
        exibirIdentificadoresAPI(cartorio);
        exibirMetricasAvaliacoes(cartorio);
        exibirConfiguracoesAPI(cartorio);
        break;
      default:
        console.log('‚ùå Argumento inv√°lido. Use: place-id, cid, rating, info, api, metricas, config, all');
    }
    return;
  }
  
  // Modo interativo
  exibirInformacoesPrincipais(cartorio);
  exibirIdentificadoresAPI(cartorio);
  
  console.log('\nüí° DICAS DE USO:');
  console.log('  node acessar-dados-cartorio.js place-id  # Retorna apenas o Place ID');
  console.log('  node acessar-dados-cartorio.js cid       # Retorna apenas o CID');
  console.log('  node acessar-dados-cartorio.js api       # Mostra todos os identificadores');
  console.log('  node acessar-dados-cartorio.js all       # Mostra todas as informa√ß√µes');
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  carregarDadosCartorio,
  exibirInformacoesPrincipais,
  exibirIdentificadoresAPI,
  exibirMetricasAvaliacoes,
  exibirConfiguracoesAPI
};
