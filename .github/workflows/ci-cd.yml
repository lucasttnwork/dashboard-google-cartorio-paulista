name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Frontend CI/CD
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: dashboard-frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard-frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 🧪 Run tests (if available)
        run: npm test --if-present
        continue-on-error: true

      - name: 🐳 Build Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build -t cartorio-frontend .

      - name: 🚀 Deploy to Railway (Frontend)
        if: github.ref == 'refs/heads/main'
        uses: railway-deploy@v1
        with:
          service: 'frontend'
          token: ${{ secrets.RAILWAY_TOKEN }}
          path: dashboard-frontend

  # Scraper CI/CD
  scraper:
    name: Scraper CI/CD
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: scraper

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: scraper/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code (if available)
        run: npm run lint --if-present
        continue-on-error: true

      - name: ✅ Validate configuration
        run: node index.js config
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: 🏥 Health check
        run: node index.js health
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        continue-on-error: true

      - name: 🧪 Run test scrape
        run: node index.js test
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          GBP_SEARCH_URL: ${{ secrets.GBP_SEARCH_URL }}
        continue-on-error: true

      - name: 🐳 Build Docker image
        if: github.ref == 'refs/heads/main'
        run: docker build -t cartorio-scraper .

      - name: 🚀 Deploy to Railway (Scraper)
        if: github.ref == 'refs/heads/main'
        uses: railway-deploy@v1
        with:
          service: 'scraper'
          token: ${{ secrets.RAILWAY_TOKEN }}
          path: scraper

  # Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔒 Run security audit (Frontend)
        working-directory: dashboard-frontend
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      - name: 🔒 Run security audit (Scraper)
        working-directory: scraper
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      - name: 📊 Code quality check
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true
          VALIDATE_DOCKERFILE: true
        continue-on-error: true

  # Notification
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [frontend, scraper]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Deployment Success
        if: needs.frontend.result == 'success' && needs.scraper.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Frontend: ✅"
          echo "Scraper: ✅"

      - name: ⚠️ Deployment Issues
        if: needs.frontend.result != 'success' || needs.scraper.result != 'success'
        run: |
          echo "⚠️ Deployment had issues:"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Scraper: ${{ needs.scraper.result }}"
